name: CI/CD & PR Preview Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    types: [opened, reopened, synchronize, labeled, unlabeled]
  pull_request_target:
    types: [opened, reopened, synchronize, labeled, unlabeled]
  workflow_dispatch:

env:
  NODE_VERSION: "20"

jobs:
  # ============================================================
  # üßÆ Detect if relevant files changed
  # ============================================================
  check_changes:
    name: Detect relevant changes
    runs-on: ubuntu-latest
    outputs:
      has_changes: ${{ steps.filter.outputs.has_changes }}
    steps:
      - name: Check for changed files (ignore root .md and config)
        id: changes
        uses: tj-actions/changed-files@v44
        with:
          files_ignore: |
            ./*.md
            .github/**
            cluster-objects/**
            LICENSE
            .gitignore
            .prettier*
            .prow.yaml

      - name: Set has_changes output
        id: filter
        run: |
          if [ -z "${{ steps.changes.outputs.all_changed_files }}" ]; then
            echo "No relevant file changes detected."
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "Detected relevant changes:"
            echo "${{ steps.changes.outputs.all_changed_files }}"
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

  # ============================================================
  # üîπ Code Quality & Build
  # ============================================================
  ci:
    name: Code Quality & Build
    runs-on: ubuntu-latest
    needs: check_changes
    if: needs.check_changes.outputs.has_changes == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Install dependencies
        run: npm ci --frozen-lockfile

      - name: Run ESLint
        run: npm run lint

      - name: Check formatting (Prettier)
        run: npm run format:check

      - name: TypeScript type check
        run: npm run type-check

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Verify build output
        run: |
          if [ -d ".next" ]; then
            echo "‚úÖ Build successful - .next directory created"
            du -sh .next/
            [ -f ".next/build-manifest.json" ] && echo "‚úÖ Build manifest exists"
          else
            echo "‚ùå Build failed - .next directory not found"
            exit 1
          fi

      - name: Run tests (if available)
        run: npm test

      - name: Security audit
        run: npm audit --audit-level=moderate
        continue-on-error: true

      - name: Upload build artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ github.event.pull_request.head.sha }}
          path: |
            ${{ github.workspace }}/.next/
            ${{ github.workspace }}/public/
            ${{ github.workspace }}/package.json
            ${{ github.workspace }}/package-lock.json
            ${{ github.workspace }}/next.config.js
            ${{ github.workspace }}/next.config.ts
          include-hidden-files: true
          retention-days: 7

  # ============================================================
  # üîπ Build & Push PR Preview Image (runs even with no changes)
  # ============================================================
  build-preview:
    name: Build & Push PR Preview Image
    runs-on: ubuntu-latest
    needs: [check_changes]
    if: github.event.action != 'closed'
    permissions:
      contents: read
      pull-requests: write
      issues: write

    steps:
      - name: Install OCI CLI
        run: |
          sudo apt-get update -y
          sudo apt-get install -y python3-pip
          pip install oci-cli

      - name: Configure OCI CLI
        env:
          OCI_CLI_USER: ${{ secrets.OCI_CLI_USER }}
          OCI_CLI_FINGERPRINT: ${{ secrets.OCI_CLI_FINGERPRINT }}
          OCI_CLI_KEY_CONTENT: ${{ secrets.OCI_CLI_KEY_CONTENT }}
          OCI_CLI_TENANCY: ${{ secrets.OCI_CLI_TENANCY }}
          OCI_CLI_REGION: ${{ secrets.OCI_CLI_REGION }}
        run: |
          mkdir -p ~/.oci
          echo "$OCI_CLI_KEY_CONTENT" > ~/.oci/oci_api_key.pem
          chmod 600 ~/.oci/oci_api_key.pem
          cat <<EOF > ~/.oci/config
          [DEFAULT]
          user=${OCI_CLI_USER}
          fingerprint=${OCI_CLI_FINGERPRINT}
          key_file=~/.oci/oci_api_key.pem
          tenancy=${OCI_CLI_TENANCY}
          region=${OCI_CLI_REGION}
          EOF

      - name: Check if author is team member or ok-to-test label present
        id: check_access
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.ORG_TOKEN }}
          script: |
            const org = 'kubestellar';
            const teams = ['kubestellar-contributors', 'kubestellar-docs'];
            const prAuthor = context.payload.pull_request.user.login;
            const labels = context.payload.pull_request.labels.map(l => l.name);
            const addedLabel = context.payload.label?.name || "";
            const hasLabel = labels.includes('ok-to-test') || addedLabel === 'ok-to-test';

            let isTeamMember = false;
            for (const team of teams) {
              try {
                await github.rest.teams.getMembershipForUserInOrg({
                  org,
                  team_slug: team,
                  username: prAuthor
                });
                console.log(`‚úÖ ${prAuthor} is a member of @${org}/${team}`);
                isTeamMember = true;
                break;
              } catch (error) {
                if (error.status === 404) continue;
                throw error;
              }
            }

            const authorized = hasLabel || isTeamMember;
            core.setOutput('authorized', authorized ? 'true' : 'false');

            if (authorized) {
              console.log(`üöÄ Authorized to run preview (label=${hasLabel}, member=${isTeamMember})`);
            } else {
              console.log(`üö´ ${prAuthor} is NOT authorized to run preview (label=${hasLabel}, member=${isTeamMember})`);
            }

      - name: Check if preview image already exists in OCIR
        id: check_existing
        if: steps.check_access.outputs.authorized == 'true'
        run: |
          echo "Checking if preview image exists for PR-${{ github.event.pull_request.number }}"
          EXISTING_IMAGE=$(oci artifacts container image list \
            --repository-name "kubestellar-docs-prs" \
            --compartment-id "${{ secrets.OCI_CLI_TENANCY }}" \
            --query 'data[?contains(`display-name`, `pr-${{ github.event.pull_request.number }}`)].id' \
            --raw-output)
          if [ -n "$EXISTING_IMAGE" ]; then
            echo "existing=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Found existing preview image."
          else
            echo "existing=false" >> $GITHUB_OUTPUT
            echo "üÜï No existing preview image found."
          fi

      - name: Download last successful build artifacts
        id: get_artifacts
        if: |
          steps.check_access.outputs.authorized == 'true' &&
          needs.check_changes.outputs.has_changes == 'false'
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ github.event.pull_request.head.sha }}
          path: .

      - name: Skip build if preview and artifacts already exist
        if: |
          steps.check_access.outputs.authorized == 'true' &&
          steps.check_existing.outputs.existing == 'true' &&
          needs.check_changes.outputs.has_changes == 'false' &&
          success()
        run: |
          echo "‚úÖ No relevant changes and existing preview image found. Skipping rebuild and redeploy."
          echo "skip_build=true" >> $GITHUB_OUTPUT

      - name: Build app for preview
        if: |
          steps.check_access.outputs.authorized == 'true' &&
          (needs.check_changes.outputs.has_changes == 'true' ||
           steps.get_artifacts.outcome != 'success')
        run: |
          echo "‚öôÔ∏è Building new preview..."
          npm ci
          npm run build

      - name: Verify build output
        if: steps.check_access.outputs.authorized == 'true' && steps.skip_build.outputs.skip_build != 'true'
        run: |
          [ -d ".next" ] && echo "‚úÖ .next verified" || (echo "‚ùå missing .next" && exit 1)

      - name: Set up Docker Buildx
        if: steps.check_access.outputs.authorized == 'true' && steps.skip_build.outputs.skip_build != 'true'
        uses: docker/setup-buildx-action@v3

      - name: Log in to Oracle Cloud Container Registry
        if: steps.check_access.outputs.authorized == 'true' && steps.skip_build.outputs.skip_build != 'true'
        uses: docker/login-action@v3
        with:
          registry: iad.ocir.io
          username: ${{ secrets.OCI_USERNAME }}
          password: ${{ secrets.OCI_AUTH_TOKEN }}

      - name: Build and push image
        if: steps.check_access.outputs.authorized == 'true' && steps.skip_build.outputs.skip_build != 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          tags: iad.ocir.io/id4wyucbsggm/kubestellar-docs-prs:pr-${{ github.event.pull_request.number }}
          provenance: false

      - name: Comment PR with preview info
        if: steps.check_access.outputs.authorized == 'true' && steps.skip_build.outputs.skip_build != 'true'
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            üß© **Preview image built and pushed**
            ```
            iad.ocir.io/id4wyucbsggm/kubestellar-docs-prs:pr-${{ github.event.pull_request.number }}
            ```
            üåê **Live Preview:**
            [http://pr-${{ github.event.pull_request.number }}.previews.kubestellar.io](http://pr-${{ github.event.pull_request.number }}.previews.kubestellar.io)

  # ============================================================
  # üßπ Cleanup on PR close
  # ============================================================
  cleanup:
    name: Cleanup PR Preview Image
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    steps:
      - name: Install OCI CLI
        run: |
          sudo apt-get update -y
          sudo apt-get install -y python3-pip
          pip install oci-cli

      - name: Configure OCI CLI
        env:
          OCI_CLI_USER: ${{ secrets.OCI_CLI_USER }}
          OCI_CLI_FINGERPRINT: ${{ secrets.OCI_CLI_FINGERPRINT }}
          OCI_CLI_KEY_CONTENT: ${{ secrets.OCI_CLI_KEY_CONTENT }}
          OCI_CLI_TENANCY: ${{ secrets.OCI_CLI_TENANCY }}
          OCI_CLI_REGION: ${{ secrets.OCI_CLI_REGION }}
        run: |
          mkdir -p ~/.oci
          echo "$OCI_CLI_KEY_CONTENT" > ~/.oci/oci_api_key.pem
          chmod 600 ~/.oci/oci_api_key.pem
          cat <<EOF > ~/.oci/config
          [DEFAULT]
          user=${OCI_CLI_USER}
          fingerprint=${OCI_CLI_FINGERPRINT}
          key_file=~/.oci/oci_api_key.pem
          tenancy=${OCI_CLI_TENANCY}
          region=${OCI_CLI_REGION}
          EOF

      - name: Delete PR image from OCIR
        run: |
          echo "Searching for image: pr-${{ github.event.pull_request.number }}"
          IMAGE_IDS=$(oci artifacts container image list \
            --repository-name "kubestellar-docs-prs" \
            --compartment-id "${{ secrets.OCI_CLI_TENANCY }}" \
            --query 'data.items[?contains(`display-name`, `pr-${{ github.event.pull_request.number }}`)].id' \
            --raw-output)
          if [ -z "$IMAGE_IDS" ]; then
            echo "No image found for PR #${{ github.event.pull_request.number }}"
          else
            for IMAGE_ID in $IMAGE_IDS; do
              echo "Deleting image: $IMAGE_ID"
              oci artifacts container image delete --image-id "$IMAGE_ID" --force
            done
          fi

      - name: Comment PR cleanup
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            üßπ **Deleted preview image from OCIR**
            ```
            iad.ocir.io/id4wyucbsggm/kubestellar-docs-prs:pr-${{ github.event.pull_request.number }}
            ```
            üì¥ **Preview URL Removed**
            http://pr-${{ github.event.pull_request.number }}.previews.kubestellar.io
